# {{ ansible_managed }}
#
# -----------------------------------------------------------------------------
# tlp - Parameters for power save
# See full explanation: http://linrunner.de/en/tlp/docs/tlp-configuration.html

# Set to 0 to disable, 1 to enable TLP.
{% if tlp_enable %}
TLP_ENABLE=1
{% else %}
TLP_ENABLE=0
{% endif %}

{% if tlp_default_mode is defined %}
# Operation mode when no power supply can be detected: AC, BAT
# Concerns some desktop and embedded hardware only.
TLP_DEFAULT_MODE="{{ tlp_default_mode }}"
{% endif %}

# Operation mode select: 0=depend on power source, 1=always use TLP_DEFAULT_MODE
# Hint: use in conjunction with TLP_DEFAULT_MODE=BAT for BAT settings on AC
TLP_PERSISTENT_DEFAULT=0

{% if tlp_disk_idle_secs is defined %}
{% if tlp_disk_idle_secs.ac is defined %}
# Seconds laptop mode has to wait after the disk goes idle before doing a sync.
# Non-zero value enables, zero disables laptop mode.
DISK_IDLE_SECS_ON_AC="{{ tlp_disk_idle_secs.ac }}"
{% endif %}
{% if tlp_disk_idle_secs.bat is defined %}
DISK_IDLE_SECS_ON_BAT="{{ tlp_disk_idle_secs.bat }}"
{% endif %}
{% endif %}

{% if tlp_max_lost_work_secs is defined %}
{% if tlp_max_lost_work_secs.ac is defined %}
MAX_LOST_WORK_SECS_ON_AC="{{ tlp_max_lost_work_secs.ac }}"
{% endif %}
{% if tlp_max_lost_work_secs.bat is defined %}
MAX_LOST_WORK_SECS_ON_BAT="{{ tlp_max_lost_work_secs.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_scaling_governor is defined %}
{% if tlp_cpu_scaling_governor.ac is defined %}
# Select a CPU frequency scaling governor.
# Intel Core i processor with intel_pstate driver:
#   powersave(*), performance
# Older hardware with acpi-cpufreq driver:
#   ondemand(*), powersave, performance, conservative, schedutil
# (*) is recommended.
# Hint: use tlp-stat -p to show the active driver and available governors.
# Important:
#   You *must* disable your distribution's governor settings or conflicts will
#   occur. ondemand is sufficient for *almost all* workloads, you should know
#   what you're doing!
CPU_SCALING_GOVERNOR_ON_AC="{{ tlp_cpu_scaling_governor.ac }}"
{% endif %}
{% if tlp_cpu_scaling_governor.bat is defined %}
CPU_SCALING_GOVERNOR_ON_BAT="{{ tlp_cpu_scaling_governor.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_scaling_max_freq is defined %}
# Set the min/max frequency available for the scaling governor.
# Possible values strongly depend on your CPU. For available frequencies see
# the output of tlp-stat -p.
{% if tlp_cpu_scaling_max_freq.ac is defined %}
CPU_SCALING_MAX_FREQ_ON_AC="{{ tlp_cpu_scaling_max_freq.ac }}"
{% endif %}
{% if tlp_cpu_scaling_max_freq.bat is defined %}
CPU_SCALING_MAX_FREQ_ON_BAT="{{ tlp_cpu_scaling_max_freq.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_scaling_min_freq is defined %}
# Set the min/max frequency available for the scaling governor.
# Possible values strongly depend on your CPU. For available frequencies see
# the output of tlp-stat -p.
{% if tlp_cpu_scaling_min_freq.ac is defined %}
CPU_SCALING_MIN_FREQ_ON_AC="{{ tlp_cpu_scaling_min_freq.ac }}"
{% endif %}
{% if tlp_cpu_scaling_min_freq.bat is defined %}
CPU_SCALING_MIN_FREQ_ON_BAT="{{ tlp_cpu_scaling_min_freq.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_min_perf is defined %}
# Set Intel P-state performance: 0..100 (%)
# Limit the max/min P-state to control the power dissipation of the CPU.
# Values are stated as a percentage of the available performance.
# Requires an Intel Core i processor with intel_pstate driver.
{% if tlp_cpu_min_perf.ac is defined %}
CPU_MIN_PERF_ON_AC="{{ tlp_cpu_min_perf.ac }}"
{% endif %}
{% if tlp_cpu_min_perf.bat is defined %}
CPU_MIN_PERF_ON_BAT="{{ tlp_cpu_min_perf.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_max_perf is defined %}
# Set Intel P-state performance: 0..100 (%)
# Limit the max/min P-state to control the power dissipation of the CPU.
# Values are stated as a percentage of the available performance.
# Requires an Intel Core i processor with intel_pstate driver.
{% if tlp_cpu_max_perf.ac is defined %}
CPU_MAX_PERF_ON_AC="{{ tlp_cpu_max_perf.ac }}"
{% endif %}
{% if tlp_cpu_max_perf.bat is defined %}
CPU_MAX_PERF_ON_BAT="{{ tlp_cpu_max_perf.bat }}"
{% endif %}
{% endif %}

# Set energy performance hints (HWP) for Intel P-state governor:
#   default, performance, balance_performance, balance_power, power
# Values are given in order of increasing power saving.
# Note: Intel Skylake or newer CPU and Kernel >= 4.10 required.
CPU_HWP_ON_AC=balance_performance
CPU_HWP_ON_BAT=balance_power

{% if tlp_cpu_boost is defined %}
# Set the CPU "turbo boost" feature: 0=disable, 1=allow
# Requires an Intel Core i processor.
# Important:
# - This may conflict with your distribution's governor settings
# - A value of 1 does *not* activate boosting, it just allows it
{% if tlp_cpu_boost.ac is defined %}
CPU_BOOST_ON_AC="{{ tlp_cpu_boost.ac }}"
{% endif %}
{% if tlp_cpu_boost.bat is defined %}
CPU_BOOST_ON_BAT="{{ tlp_cpu_boost.bat }}"
{% endif %}
{% endif %}

{% if tlp_cpu_sched_powersave is defined %}
# Minimize number of used CPU cores/hyper-threads under light load conditions
{% if tlp_cpu_sched_powersave.ac is defined %}
CPU_SCHED_POWERSAVE_ON_AC="{{ tlp_cpu_sched_powersave.ac }}"
{% endif %}
{% if tlp_cpu_sched_powersave.bat is defined %}
CPU_SCHED_POWERSAVE_ON_BAT="{{ tlp_cpu_sched_powersave.bat }}"
{% endif %}
{% endif %}

{% if tlp_nmi_watchdog is defined %}
# Kernel NMI Watchdog:
#   0=disable (default, saves power), 1=enable (for kernel debugging only)
NMI_WATCHDOG="{{ tlp_nmi_watchdog }}"
{% endif %}

# Change CPU voltages aka "undervolting" - Kernel with PHC patch required
# Frequency voltage pairs are written to:
#   /sys/devices/system/cpu/cpu0/cpufreq/phc_controls
# CAUTION: only use this, if you thoroughly understand what you are doing!
#PHC_CONTROLS="F:V F:V F:V F:V"
{% if tlp_pgc_controls is defined %}
PGC_CONTROLS="{{ tlp_pgc_controls }}"
{% endif %}

{% if tlp_energy_perf_policy is defined %}
# Set CPU performance versus energy savings policy:
#   performance, normal, powersave
# Requires kernel module msr and x86_energy_perf_policy from linux-tools
{% if tlp_energy_perf_policy.ac is defined %}
ENERGY_PERF_POLICY_ON_AC="{{ tlp_energy_perf_policy.ac }}"
{% endif %}
{% if tlp_energy_perf_policy.bat is defined %}
ENERGY_PERF_POLICY_ON_BAT="{{ tlp_energy_perf_policy.bat }}"
{% endif %}
{% endif %}

{% if tlp_sata_linkpwr is defined %}
# SATA aggressive link power management (ALPM):
#   min_power, medium_power, max_performance
{% if tlp_sata_linkpwr.ac is defined %}
SATA_LINKPWR_ON_AC="{{ tlp_sata_linkpwr.ac }}"
{% endif %}
{% if tlp_sata_linkpwr.bat is defined %}
SATA_LINKPWR_ON_BAT="{{ tlp_sata_linkpwr.bat }}"
{% endif %}
{% endif %}

{% if tlp_disk_devices is defined %}
# Hard disk devices; separate multiple devices with spaces (default: sda).
# Devices can be specified by disk ID also (lookup with: tlp diskid).
DISK_DEVICES="{{ tlp_disk_devices }}"
{% endif %}

{% if tlp_disk_apm_level is defined %}
# Hard disk advanced power management level: 1..254, 255 (max saving, min, off)
# Levels 1..127 may spin down the disk; 255 allowable on most drives.
# Separate values for multiple disks with spaces. Use the special value 'keep'
# to keep the hardware default for the particular disk.
{% if tlp_disk_apm_level.ac is defined %}
DISK_APM_LEVEL_ON_AC="{{ tlp_disk_apm_level.ac }}"
{% endif %}
{% if tlp_disk_apm_level.bat is defined %}
DISK_APM_LEVEL_ON_BAT="{{ tlp_disk_apm_level.bat }}"
{% endif %}
{% endif %}

{% if tlp_disk_spindown_timeout is defined %}
# Hard disk spin down timeout:
#   0:        spin down disabled
#   1..240:   timeouts from 5s to 20min (in units of 5s)
#   241..251: timeouts from 30min to 5.5 hours (in units of 30min)
# See 'man hdparm' for details.
# Separate values for multiple disks with spaces. Use the special value 'keep'
# to keep the hardware default for the particular disk.
{% if tlp_disk_spindown_timeout.ac is defined %}
DISK_SPINDOWN_TIMEOUT_ON_AC="{{ tlp_disk_spindown_timeout.ac }}"
{% endif %}
{% if tlp_disk_spindown_timeout.bat is defined %}
DISK_SPINDOWN_TIMEOUT_ON_BAT="{{ tlp_disk_spindown_timeout.bat }}"
{% endif %}
{% endif %}

{% if tlp_disk_iosched is defined %}
# Select IO scheduler for the disk devices: cfq, deadline, noop (Default: cfq);
# Separate values for multiple disks with spaces. Use the special value 'keep'
# to keep the kernel default scheduler for the particular disk.
DISK_IOSCHED="{{ tlp_disk_iosched }}"
{% endif %}

{% if tlp_sata_linkpwr is defined %}
# SATA aggressive link power management (ALPM):
#   min_power, medium_power, max_performance
{% if tlp_sata_linkpwr.ac is defined %}
SATA_LINKPWR_ON_AC="{{ tlp_sata_linkpwr.ac }}"
{% endif %}
{% if tlp_sata_linkpwr.bat is defined %}
SATA_LINKPWR_ON_BAT="{{ tlp_sata_linkpwr.bat }}"
{% endif %}
{% endif %}

# Exclude SATA host devices from link power management.
# Separate multiple hosts with spaces.
#SATA_LINKPWR_BLACKLIST="host1"

{% if tlp_ahci_runtime_pm is defined %}
# Runtime Power Management for AHCI controllers and disks:
#   on=disable, auto=enable
# EXPERIMENTAL ** WARNING: auto will most likely cause system lockups/data loss
{% if tlp_ahci_runtime_pm.ac is defined %}
AHCI_RUNTIME_PM_ON_AC="{{ tlp_ahci_runtime_pm.ac }}"
{% endif %}
{% if tlp_ahci_runtime_pm.bat is defined %}
AHCI_RUNTIME_PM_ON_BAT="{{ tlp_ahci_runtime_pm.bat }}"
{% endif %}
{% endif %}

{% if tlp_ahci_runtime_pm_timeout is defined %}
# Seconds of inactivity before disk is suspended
AHCI_RUNTIME_PM_TIMEOUT="{{ tlp_ahci_runtime_pm_timeout }}"
{% endif %}

{% if tlp_pci_aspm is defined %}
# PCI Express Active State Power Management (PCIe ASPM):
#   default, performance, powersave
{% if tlp_pci_aspm.ac is defined %}
PCI_ASPM_ON_AC="{{ tlp_pci_aspm.ac }}"
{% endif %}
{% if tlp_pci_aspm.bat is defined %}
PCI_ASPM_ON_BAT="{{ tlp_pci_aspm.bat }}"
{% endif %}
{% endif %}

{% if tlp_radeon_power_profile is defined %}
# Radeon graphics clock speed (profile method): low, mid, high, auto, default;
# auto = mid on BAT, high on AC; default = use hardware defaults.
# (Kernel >= 2.6.35 only, open-source radeon driver explicitly)
{% if tlp_radeon_power_profile.ac is defined %}
RADEON_POWER_PROFILE_ON_AC="{{ tlp_radeon_power_profile.ac }}"
{% endif %}
{% if tlp_radeon_power_profile.bat is defined %}
RADEON_POWER_PROFILE_ON_BAT="{{ tlp_radeon_power_profile.bat }}"
{% endif %}
{% endif %}

{% if tlp_radeon_dpm_state is defined %}
# Radeon dynamic power management method (DPM): battery, performance
# (Kernel >= 3.11 only, requires boot option radeon.dpm=1)
{% if tlp_radeon_dpm_state.ac is defined %}
RADEON_DPM_STATE_ON_AC="{{ tlp_radeon_dpm_state.ac }}"
{% endif %}
{% if tlp_radeon_dpm_state.bat is defined %}
RADEON_DPM_STATE_ON_BAT="{{ tlp_radeon_dpm_state.bat }}"
{% endif %}
{% endif %}

{% if tlp_radeon_dpm_perf_level is defined %}
# Radeon DPM performance level: auto, low, high; auto is recommended.
{% if tlp_radeon_dpm_perf_level.ac is defined %}
RADEON_DPM_PERF_LEVEL_ON_AC="{{ tlp_radeon_dpm_perf_level.ac }}"
{% endif %}
{% if tlp_radeon_dpm_perf_level.bat is defined %}
RADEON_DPM_PERF_LEVEL_ON_BAT="{{ tlp_radeon_dpm_perf_level.bat }}"
{% endif %}
{% endif %}

{% if tlp_wifi_pwr is defined %}
# WiFi power saving mode: on=enable, off=disable; not supported by all adapters.
{% if tlp_wifi_pwr.ac is defined %}
WIFI_PWR_ON_AC="{{ tlp_wifi_pwr.ac }}"
{% endif %}
{% if tlp_wifi_pwr.bat is defined %}
WIFI_PWR_ON_BAT="{{ tlp_wifi_pwr.bat }}"
{% endif %}
{% endif %}

{% if tlp_wol_disable is defined %}
# Disable wake on LAN: Y/N
WOL_DISABLE="{{ tlp_wol_disable }}"
{% endif %}

{% if tlp_sound_power_save is defined %}
# Enable audio power saving for Intel HDA, AC97 devices (timeout in secs).
# A value of 0 disables, >=1 enables power saving.
{% if tlp_sound_power_save.ac is defined %}
SOUND_POWER_SAVE_ON_AC="{{ tlp_sound_power_save.ac }}"
{% endif %}
{% if tlp_sound_power_save.bat is defined %}
SOUND_POWER_SAVE_ON_BAT="{{ tlp_sound_power_save.bat }}"
{% endif %}
{% endif %}

{% if tlp_sound_power_save_controller is defined %}
# Disable controller too (HDA only): Y/N
SOUND_POWER_SAVE_CONTROLLER="{{ tlp_sound_power_save_controller }}"
{% endif %}

{% if tlp_bay_poweroff is defined %}
# Power off optical drive in UltraBay/MediaBay: 0=disable, 1=enable.
# Drive can be powered on again by releasing (and reinserting) the eject lever
# or by pressing the disc eject button on newer models.
# Note: an UltraBay/MediaBay hard disk is never powered off.
{% if tlp_bay_poweroff.bat is defined %}
BAY_POWEROFF_ON_BAT="{{ tlp_bay_poweroff.bat }}"
{% endif %}
{% if tlp_bay_poweroff.ac is defined %}
BAY_POWEROFF_ON_AC="{{ tlp_bay_poweroff.ac }}"
{% endif %}
{% endif %}

{% if tlp_bay_device is defined %}
# Optical drive device to power off (default sr0).
BAY_DEVICE="{{ tlp_bay_device }}"
{% endif %}

{% if tlp_runtime_pm is defined %}
# Runtime Power Management for PCI(e) bus devices: on=disable, auto=enable
{% if tlp_runtime_pm.ac is defined %}
RUNTIME_PM_ON_AC="{{ tlp_runtime_pm.ac }}"
{% endif %}
{% if tlp_runtime_pm.bat is defined %}
RUNTIME_PM_ON_BAT="{{ tlp_runtime_pm.bat }}"
{% endif %}
{% endif %}

{% if tlp_runtime_pm_all is defined %}
RUNTIME_PM_ALL="{{ tlp_runtime_pm_all }}"
{% endif %}

{% if tlp_runtime_pm_blacklist is defined %}
# Exclude PCI(e) device adresses the following list from Runtime PM
# (separate with spaces). Use lspci to get the adresses (1st column).
RUNTIME_PM_BLACKLIST="{{ tlp_runtime_pm_blacklist }}"
{% endif %}

{% if tlp_runtime_pm_driver_blacklist is defined %}
RUNTIME_PM_DRIVER_BLACKLIST="{{ tlp_runtime_pm_driver_blacklist }}"
{% endif %}

{% if tlp_usb_autosuspend is defined %}
# Set to 0 to disable, 1 to enable USB autosuspend feature.
USB_AUTOSUSPEND="{{ tlp_usb_autosuspend }}"
{% endif %}

{% if tlp_usb_blacklist is defined %}
# Exclude listed devices from USB autosuspend (separate with spaces).
# Use lsusb to get the ids.
# Note: input devices (usbhid) are excluded automatically
USB_BLACKLIST="{{ tlp_usb_blacklist }}"
{% endif %}

# Bluetooth devices are excluded from USB autosuspend:
#   0=do not exclude, 1=exclude
USB_BLACKLIST_BTUSB=0

# Phone devices are excluded from USB autosuspend:
#   0=do not exclude, 1=exclude (enable charging)
USB_BLACKLIST_PHONE=0

{% if tlp_usb_blacklist_wwan is defined %}
# WWAN devices are excluded from USB autosuspend:
#   0=do not exclude, 1=exclude
USB_BLACKLIST_WWAN="{{ tlp_usb_blacklist_wwan }}"
{% endif %}

{% if tlp_usb_whitelist is defined %}
# Include listed devices into USB autosuspend even if already excluded
# by the blacklists above (separate with spaces).
# Use lsusb to get the ids.
USB_WHITELIST="{{ tlp_usb_whitelist }}"
{% endif %}

{% if tlp_usb_autosuspend_disable is defined %}
# Set to 1 to disable autosuspend before shutdown, 0 to do nothing
# (workaround for USB devices that cause shutdown problems).
{% if tlp_usb_autosuspend_disable and tlp_usb_autosuspend_disable.shutdown is defined %}
USB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN="{{ tlp_usb_autosuspend_disable.shutdown }}"
{% endif %}
{% endif %}

{% if tlp_restore_device_state is defined %}
# Restore radio device state (Bluetooth, WiFi, WWAN) from previous shutdown
# on system startup: 0=disable, 1=enable.
# Hint: the parameters DEVICES_TO_DISABLE/ENABLE_ON_STARTUP/SHUTDOWN below
#   are ignored when this is enabled!
{% if tlp_restore_device_state and tlp_restore_device_state.startup is defined %}
RESTORE_DEVICE_STATE_ON_STARTUP="{{ tlp_restore_device_state.startup }}"
{% endif %}
{% endif %}

{% if tlp_devices_to_disable is defined %}

{% if tlp_devices_to_disable.startup is defined %}
# Radio devices to disable on startup: bluetooth, wifi, wwan.
# Separate multiple devices with spaces.
DEVICES_TO_DISABLE_ON_STARTUP="{{ tlp_devices_to_disable.startup }}"
{% endif %}
{% if tlp_devices_to_disable.shutdown is defined %}
# Radio devices to disable on shutdown: bluetooth, wifi, wwan
# (workaround for devices that are blocking shutdown).
DEVICES_TO_DISABLE_ON_SHUTDOWN="{{ tlp_devices_to_disable.shutdown }}"
{% endif %}
{% if tlp_devices_to_disable.bat is defined %}
DEVICES_TO_DISABLE_ON_BAT="{{ tlp_devices_to_disable.bat }}"
{% endif %}
{% if tlp_devices_to_disable.bat_not_in_use is defined %}
# Radio devices to disable on battery when not in use (not connected):
# bluetooth, wifi, wwan
DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE="{{ tlp_devices_to_disable.bat_not_in_use }}"
{% endif %}
{% if tlp_devices_to_disable.lan_connect is defined %}
DEVICES_TO_DISABLE_ON_LAN_CONNECT="{{ tlp_devices_to_disable.lan_connect }}"
{% endif %}
{% if tlp_devices_to_disable.wifi_connect is defined %}
DEVICES_TO_DISABLE_ON_WIFI_CONNECT="{{ tlp_devices_to_disable.wifi_connect }}"
{% endif %}
{% if tlp_devices_to_disable.wwan_connect is defined %}
DEVICES_TO_DISABLE_ON_WWAN_CONNECT="{{ tlp_devices_to_disable.wwan_connect }}"
{% endif %}
{% if tlp_devices_to_disable.dock is defined %}
DEVICES_TO_DISABLE_ON_DOCK="{{ tlp_devices_to_disable.dock }}"
{% endif %}
{% if tlp_devices_to_disable.undock is defined %}
DEVICES_TO_DISABLE_ON_UNDOCK="{{ tlp_devices_to_disable.undock }}"
{% endif %}
{% endif %}

{% if tlp_devices_to_enable is defined %}

{% if tlp_devices_to_enable.startup is defined %}
# Radio devices to enable on startup: bluetooth, wifi, wwan.
# Separate multiple devices with spaces
DEVICES_TO_ENABLE_ON_STARTUP="{{ tlp_devices_to_enable.startup }}"
{% endif %}
{% if tlp_devices_to_enable.shutdown is defined %}
# Radio devices to enable on shutdown: bluetooth, wifi, wwan
# (to prevent other operating systems from missing radios).
DEVICES_TO_ENABLE_ON_SHUTDOWN="{{ tlp_devices_to_enable.shutdown }}"
{% endif %}
{% if tlp_devices_to_enable.bat is defined %}
# Radio devices to disable on battery: bluetooth, wifi, wwan
DEVICES_TO_ENABLE_ON_BAT="{{ tlp_devices_to_enable.bat }}"
{% endif %}
# Radio devices to enable on AC: bluetooth, wifi, wwan
#DEVICES_TO_ENABLE_ON_AC="bluetooth wifi wwan"
{% if tlp_devices_to_enable.bat_not_in_use is defined %}
DEVICES_TO_ENABLE_ON_BAT_NOT_IN_USE="{{ tlp_devices_to_enable.bat_not_in_use }}"
{% endif %}
{% if tlp_devices_to_enable.lan_connect is defined %}
DEVICES_TO_ENABLE_ON_LAN_CONNECT="{{ tlp_devices_to_enable.lan_connect }}"
{% endif %}
{% if tlp_devices_to_enable.wifi_connect is defined %}
DEVICES_TO_ENABLE_ON_WIFI_CONNECT="{{ tlp_devices_to_enable.wifi_connect }}"
{% endif %}
{% if tlp_devices_to_enable.wwan_connect is defined %}
DEVICES_TO_ENABLE_ON_WWAN_CONNECT="{{ tlp_devices_to_enable.wwan_connect }}"
{% endif %}
{% if tlp_devices_to_enable.dock is defined %}
DEVICES_TO_ENABLE_ON_DOCK="{{ tlp_devices_to_enable.dock }}"
{% endif %}
{% if tlp_devices_to_enable.undock is defined %}
DEVICES_TO_ENABLE_ON_UNDOCK="{{ tlp_devices_to_enable.undock }}"
{% endif %}
{% endif %}

{% if tlp_charge_thresh is defined %}
{% for bat, bat_thresh in tlp_charge_thresh.iteritems() %}
{% if bat_thresh %}
# Battery charge thresholds (ThinkPad only, tp-smapi or acpi-call kernel module
# required). Charging starts when the remaining capacity falls below the
# START_CHARGE_THRESH value and stops when exceeding the STOP_CHARGE_THRESH value.
# Main / Internal battery (values in %)
{% if bat_thresh.start is defined %}
START_CHARGE_THRESH_{{ bat|upper}}="{{ bat_thresh.start }}"
{% endif %}
{% if bat_thresh.stop is defined %}
STOP_CHARGE_THRESH_{{ bat|upper}}="{{ bat_thresh.stop }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

# Restore charge thresholds when AC is unplugged: 0=disable, 1=enable
#RESTORE_THRESHOLDS_ON_BAT=1

# ------------------------------------------------------------------------------
# tlp-rdw - Parameters for the radio device wizard
# Possible devices: bluetooth, wifi, wwan

# Hints:
# - Parameters are disabled by default, remove the leading # to enable them.
# - Separate multiple radio devices with spaces.

# Radio devices to disable on connect.
#DEVICES_TO_DISABLE_ON_LAN_CONNECT="wifi wwan"
#DEVICES_TO_DISABLE_ON_WIFI_CONNECT="wwan"
#DEVICES_TO_DISABLE_ON_WWAN_CONNECT="wifi"

# Radio devices to enable on disconnect.
#DEVICES_TO_ENABLE_ON_LAN_DISCONNECT="wifi wwan"
#DEVICES_TO_ENABLE_ON_WIFI_DISCONNECT=""
#DEVICES_TO_ENABLE_ON_WWAN_DISCONNECT=""

# Radio devices to enable/disable when docked.
#DEVICES_TO_ENABLE_ON_DOCK=""
#DEVICES_TO_DISABLE_ON_DOCK=""

# Radio devices to enable/disable when undocked.
#DEVICES_TO_ENABLE_ON_UNDOCK="wifi"
#DEVICES_TO_DISABLE_ON_UNDOCK=""
